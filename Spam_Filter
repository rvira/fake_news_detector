```

## two methods namely KMP and Hash mapping- Rabin Karp string Matching 


import math
import time
import matplotlib.pyplot as plt

# String matching algorithm
def rabin_karp(s, p):
    n = len(s)
    m = len(p)
    hash_p = 0
    hash_s = 0
    found = 0
    # Hash-function: abc -> a*100 + b*10 + c
    # Hashing the pattern using ascii values of characters: ord(char)
    for i in p:
        hash_p *= 10
        hash_p += ord(i)
    # Hashing the string using ascii values of characters: ord(char)
    for j in range(m):
        hash_s *= 10
        hash_s += ord(s[j])
    for k in range(n-m+1):
        if hash_p == hash_s:
            # print(f"Pattern found at index {k}")
            found += 1
        if k + m < n:
            # remove first character hashvalue and add next character hashvalue
            hash_s -= ord(s[k])*10**(m-1)
            hash_s *= 10
            hash_s += ord(s[k + m])
    # if found == 0:
        # print("Pattern not found!")
    
    return found


def KMPSearch(pat, txt):
    M = len(pat)
    N = len(txt)
    count = 0

    lps = [0] * M
    j = 0 

    computeLPSArray(pat, M, lps)

    i = 0 
    while i < N:
        if pat[j] == txt[i]:
            i += 1
            j += 1

        if j == M:
            # print("Found pattern at index " + str(i - j))
            count += 1
            j = lps[j - 1]

        # mismatch after j matches
        elif i < N and pat[j] != txt[i]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    return count


def computeLPSArray(pat, M, lps):
    len = 0

    lps[0] = 0
    i = 1

    while i < M:
        if pat[i] == pat[len]:
            len += 1
            lps[i] = len
            i += 1
        else:
            if len != 0:
                len = lps[len - 1]
            else:
                lps[i] = 0
                i += 1


def spam_checker_kmp(arr, s):
    running_count = 0
    for word in p_arr:
        running_count += len(word) * KMPSearch(word, s)
    confidence = running_count / len(s)
    confidence = (1 / (1 + math.exp(-10 * confidence)) - 0.5) * 200
    print(f"\nThe likelihood of the message being a spam is {confidence}%")


def spam_checker_rabinkarp(arr, s):
    running_count = 0
    for word in p_arr:
        running_count += len(word) * rabin_karp(s, word)
    confidence = running_count / len(s)
    confidence = (1 / (1 + math.exp(-10 * confidence)) - 0.5) * 200


p_arr = ["now", "!", "switch over", "cashback", "discount", "deal", "offer", "if you don't", "Act now", "Action", "Apply now", "Apply online", "lottery","0000", "Bitcoin", "Buy", "Buy direct", "Call", "Call now", "Click here", "Clearance", "Do it today", "Don’t delete", "Drastically reduced", "Exclusive deal", "Expire", "Get", "Get it now", "Get started now", "Important information", "Instant", "Limited time", "New customers only", "Now only", "Offer expires", "Once in a lifetime", "Order now", "Please read", "Special promotion", "Take action", "This won’t last", "Urgent", "While stocks last", "0%", "All-new", "All new", "Bargain", "Best price", "Bonus", "Email marketing", "Free", "For instant access", "Free gift", "Free trial", "Have you been turned down?", "Great offer", "Incredible", "Prize", "Satisfaction", "guaranteed", "not believe your eyes"]
n = int(input("Enter the number of test cases: "))
p_arr = [x.lower() for x in p_arr]
time_array_kmp = []
time_array_rabinkarp = []
size_array = []
for i in range(n):
    s = input("Enter the message to check: ")
    start = time.process_time()
    spam_checker_kmp(p_arr, s.lower())
    time_array_kmp.append(time.process_time() - start)
    start = time.process_time()
    spam_checker_rabinkarp(p_arr, s.lower())
    time_array_rabinkarp.append(time.process_time() - start)
    size_array.append(len(s))

plt.plot(size_array, time_array_kmp, color = 'green', label = 'KMP')
plt.plot(size_array, time_array_rabinkarp, color = 'blue', label = 'RabinKarp')
plt.xlabel('Size of input')
plt.ylabel('Runtime')
plt.title('Runtime Comparison')
plt.legend()
plt.show()



```
